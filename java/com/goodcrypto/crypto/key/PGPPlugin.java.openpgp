package com.goodcrypto.crypto.key;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Random;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;

import com.goodcrypto.crypto.CryptoException;
import com.goodcrypto.crypto.OpenPGP;
import com.goodcrypto.io.IgnoredLog;
import com.goodcrypto.io.Log;
import com.goodcrypto.io.LogFile;
import com.goodcrypto.util.SubprogramInteraction;


/**
 * Pretty Good Privacy crypto key plugin.
 * <p>
 * Currently duplicates much code from GPGPlugin. E.g. getFingerprint() is identical except
 * for the command.
 * <p>
 * Warning: Code here should be careful to only allow one instance of PGP at a time.
 * <p>
 * Pgp's key handling is so bad that we generally defer to bc via OpenPGP here.
 *
 * <p>Copyright 2004-2005 GoodCrypto
 * <br>Last modified: 2005.11.25
 *
 * @author     GoodCrypto
 * @version    0.1
 */
public class PGPPlugin
     extends com.goodcrypto.crypto.PGPPlugin
     implements KeyService, PGPPluginConstants
{
    private static Log log = new LogFile();
    private OpenPGP openpgp;


    /** Creates a new PGPPlugin object. */
    public PGPPlugin()
    {
        log.println("Ready");
        openpgp = new OpenPGP(this);
    }


    /**
     * Get the plugin's name.
     * (copied from PluginInterface)
     *
     * @return    Name of the plugin
     */
    public synchronized String getName()
    {
        return PGPPluginConstants.Name;
    }


    /**
     * Get the version of this plugin's implementation, i.e. the CORBA servant's version.
     * (copied from PluginInterface)
     *
     * @return    Plugin version
     */
    public synchronized String getPluginVersion()
    {
        return "0.1";
    }


    /**
     * Returns whether the specified function is supported.
     *
     * @param  func  The function to check
     * @return       Whether the function is supported
     */
    public boolean isFunctionSupported(String func)
    {
        return true;
    }


    /**
     *          Create a new public key pair.
     *
     *  Create a new key and add it to the keyring.
     * (copied from PluginInterface)
     *
     * @param  userID                                       ID for the new key. This is typically your own email address.
     * @param  passphrase                                   Passphrase
     * @exception  com.goodcrypto.crypto.CryptoException  Description of Exception
     */
    public void create(String userID, String passphrase)
        throws com.goodcrypto.crypto.CryptoException
    {
        try {
            if (isValid(userID)) {
                String message = "key already exists: " + userID;
                log.println(message);
                throw new CryptoException(message);
            }
            else {
                openpgp.create(userID, passphrase);
            }
        }
        catch (CryptoException ce) {
                throw ce;
        }
        catch (Exception e) {
            handleUnexpectedException(e);
        }
    }


    /**
     *          Delete a key.
     *
     *  Delete an existing key, or key pair, from the keyring.
     * (copied from PluginInterface)
     *
     * @param  userID                                       ID for the new key. This is typically your own email address.
     * @exception  com.goodcrypto.crypto.CryptoException  Description of Exception
     */
    public void delete(String userID)
        throws com.goodcrypto.crypto.CryptoException
    {
        log.println("delete: userID: " + userID);
        try {
            if (isValid(userID)) {

                openpgp.delete(userID);

            }
            else {
                String message = "key is not valid: " + userID;
                log.println(message);
                throw new CryptoException(message);
            }
        }
        catch (CryptoException ce) {
                throw ce;
        }
        catch (Exception e) {
            handleUnexpectedException(e);
        }
    }


    /**
     *          Import a public key.
     *
     *  Add a public key to the keyring.
     *  <p>
     *  Some crypto engines will allow more than one public key to be imported at
     *  one time, but applications should not rely on this.
     *
     * @param  data                                         Public key data.
     * @exception  com.goodcrypto.crypto.CryptoException  Description of Exception
     */
    public void importPublic(byte[] data)
        throws com.goodcrypto.crypto.CryptoException
    {
        try {
            openpgp.importPublic(data);
        }
        catch (CryptoException ce) {
                throw ce;
        }
        catch (Exception e) {
            handleUnexpectedException(e);
        }
    }


    /**
     *          Export a public key.
     *
     *  Export a public key from the keyring.
     *
     * @param  userID                                       ID for the key. This is typically an email address.
     * @return                                              Public key
     * @exception  com.goodcrypto.crypto.CryptoException  Description of Exception
     */
    public String exportPublic(String userID)
        throws com.goodcrypto.crypto.CryptoException
    {
        String publicKey = null;

        try {
            publicKey = openpgp.exportPublic(userID);
        }
        catch (CryptoException ce) {
                throw ce;
        }
        catch (Exception e) {
            handleUnexpectedException(e);
        }

        return publicKey;
    }


    /**
     *          Whether a key ID is valid.
     *
     * @param  userID                                       ID for the key. This is typically an email address.
     * @return                                              Whether the key ID is valid
     * @exception  com.goodcrypto.crypto.CryptoException  Description of Exception
     */
    public boolean isValid(String userID)
        throws com.goodcrypto.crypto.CryptoException
    {
        return openpgp.isValid(userID);
        // return getFingerprint(userID) != null;
    }


    /**
     *          Returns a key's fingerprint.
     *
     * @param  userID                                       ID for the key. This is typically an email address.
     * @return                                              Fingerprint
     * @exception  com.goodcrypto.crypto.CryptoException  Description of Exception
     */
    public String getFingerprint(String userID)
        throws com.goodcrypto.crypto.CryptoException
    {
        final String FingerprintPrefix = "Key fingerprint =";
        String fingerprint = null;

        try {
            String email = getEmail(userID);
            if (email != null) {
                String[] command = {PGPCommand, "-kvc", email};
                SubprogramInteraction subprogram = new SubprogramInteraction(command);

                // wait for fingerprint line
                String line = subprogram.readLine();
                while (line != null &&
                    line.indexOf(FingerprintPrefix) < 0) {
                    line = subprogram.readLine();
                }
                // get just the fingerprint, without spaces
                if (line != null) {
                    line = line.substring(line.indexOf(FingerprintPrefix) + FingerprintPrefix.length());
                    line = line.trim();
                    if (line.length() > 0) {
                        fingerprint = line;
                        int spacePosition = fingerprint.indexOf(' ');
                        while (spacePosition >= 0) {
                            // remove the space
                            fingerprint = fingerprint.substring(0, spacePosition) +
                                fingerprint.substring(spacePosition + 1);
                            spacePosition = fingerprint.indexOf(' ');
                        }
                    }
                }

                subprogram.close();
            }
        }
        /* there is no CryptoException if we don't use OpenPGP for getFingerprint( 
        catch (CryptoException ce) {
                throw ce;
        }
        */
        catch (Exception e) {
            handleUnexpectedException(e);
        }

        log.println("fingerprint for " + userID + ": " + fingerprint);
        return fingerprint;
    }


    private String getEmail(String userID)
    {
        String email = null;
        try {
            email = new InternetAddress(userID).getAddress();
        }
        catch (AddressException ae) {
            log.print(ae);
        }
        return email;
    }
}

